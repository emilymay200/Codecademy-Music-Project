1) Which tracks appeared in the most playlists? how many playlist did they appear in?
This code joins the playlist and tracks databases using the Track ID as this is the primary key for both tables. Left join is used inside of join as we only want tracks that are in playlists.
Then lists the name for the tracks for a much easier user experience.
Finally, the code counts how many times each track is used in a playlist by counting the number of rows in playlistID and grouping by track ID and then placing in decending order.

SELECT playlist_track.TrackId, 
	   tracks.Name, 
	   COUNT(playlist_track.PlaylistId) AS "Number of playlists appears in"
FROM playlist_track
LEFT JOIN tracks
ON playlist_track.TrackId = tracks.TrackId
GROUP BY 1
ORDER BY 3 desc;

2) Which track generated the most revenue?
This code joins the invoice and track databases using the track ID. It then calculates the total unit price by each track name (as each row is one purchase but not all the tracks are 99p).
This is then put in a table with the name for easy reading and ordered by Revenue in descending order.

SELECT tracks.Name, SUM(invoice_items.UnitPrice) AS "Revenue"
from invoice_items
JOIN tracks
ON tracks.TrackId = invoice_items.TrackId
GROUP BY tracks.TrackId
ORDER BY 2 DESC;

3) Which track generated the most revenue?
This code includes the album data also. Instead of grouping by track ID we use the album ID to link the album table and display the most profitable albums.

SELECT albums.Title, SUM(invoice_items.UnitPrice) AS "Revenue"
from tracks
JOIN invoice_items
	ON tracks.TrackId = invoice_items.TrackId
JOIN albums
	ON tracks.AlbumId = albums.AlbumId
GROUP BY albums.AlbumId
ORDER BY 2 DESC;

4) Which genres generate the most revenue?
Same as above except using the genre table instead of the albums. 
In this instance I chose to round to 2dp as the numbers quickly became complex, therefore this table would be more useful for an overview table (eg. in presentation) than for working out statistics.

SELECT genres.Name, ROUND(SUM(invoice_items.UnitPrice),2) AS "Revenue"
from tracks
JOIN invoice_items
	ON tracks.TrackId = invoice_items.TrackId
JOIN genres
	ON tracks.GenreId = genres.GenreId
GROUP BY genres.GenreId
ORDER BY 2 DESC;

5) Which countries have the highest sales revenue? 
This involved linking the two invoices tables and grouping by country.

SELECT invoices.BillingCountry, ROUND(SUM(invoice_items.UnitPrice),2) AS "Total Country Revenue"
from invoice_items
JOIN invoices
	ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY invoices.BillingCountry
ORDER BY 2 DESC;
